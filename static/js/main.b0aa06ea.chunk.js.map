{"version":3,"sources":["todos.js","AddTask.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTask","s","console","log","todoList","length","map","todo","react_default","a","createElement","className","key","id","content","onClick","AddTodo","state","handleSubmit","e","preventDefault","_this","props","addTask","setState","handleChange","target","value","onSubmit","this","type","onChange","Component","App","filter","Cookies","remove","present","i","displayAlert","document","getElementById","innerHTML","Math","random","concat","Object","toConsumableArray","set","JSON","stringify","expires","obj","values","get","parse","src_todos","AddTask","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAwBeA,EAtBD,SAAAC,GAA4B,IAA1BC,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,WAAmBF,EAAPG,EAC/BC,QAAQC,IAAIJ,GACZ,IAAMK,EAAWL,EAAMM,OACnBN,EAAMO,IAAI,SAAAC,GACN,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAKL,EAAKM,IACvCL,EAAAC,EAAAC,cAAA,YAAOH,EAAKO,SAAeN,EAAAC,EAAAC,cAAA,YAC3BF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qCAAqCI,QAAS,WAAOf,EAAWO,EAAKM,MAAvF,aAKZL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,8BAGJ,OACIH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACVP,ICcEY,6MA9BXC,MAAQ,CACJH,QAAS,MAGbI,aAAe,SAACC,GACZA,EAAEC,iBACFC,EAAKC,MAAMC,QAAQF,EAAKJ,OACxBI,EAAKG,SAAS,CACVV,QAAS,QAIjBW,aAAe,SAACN,GACZE,EAAKG,SAAS,CACVV,QAASK,EAAEO,OAAOC,iFAKtB,OACInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMkB,SAAUC,KAAKX,cACjBV,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,OAAOC,SAAUF,KAAKJ,aAAcE,MAAOE,KAAKZ,MAAMH,UAAiBN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sCAAlB,mBAxBjFqB,6BCoEPC,6MAhEbhB,MAAQ,CACNlB,MAAO,MAITE,GAAI,IAeJD,WAAa,SAACa,GACZ,IAAMd,EAAQsB,EAAKJ,MAAMlB,MAAMmC,OAAO,SAAA3B,GACpC,OAAOA,EAAKM,KAAOA,IAErBsB,IAAQC,OAAOvB,GACfQ,EAAKG,SAAS,CACZzB,MAAOA,OAGXwB,QAAU,SAAChB,GAET,IAAI8B,GAAU,EACd,IAAI,IAAIC,KAAKjB,EAAKJ,MAAMlB,MACnBsB,EAAKJ,MAAMlB,MAAMuC,GAAGxB,UAAYP,EAAKO,UACtCuB,GAAU,GAId,GAAIA,EAUFhB,EAAKkB,aAAa,aAVR,CACVC,SAASC,eAAe,SAASC,UAAY,GAC7CnC,EAAKM,GAAK8B,KAAKC,SACf,IAAM7C,EAAK,GAAA8C,OAAAC,OAAAC,EAAA,EAAAD,CAAOzB,EAAKJ,MAAMlB,OAAlB,CAAyBQ,IACpCc,EAAKG,SAAS,CACZzB,MAAOA,IAEToC,IAAQa,IAAIzC,EAAKM,GAAIoC,KAAKC,UAAU3C,GAAO,CAAE4C,QAAS,KACtD9B,EAAKpB,GAAI,uFAvCX,IACImD,EADMN,OAAOO,OAAOlB,IAAQmB,OACpBhD,IAAI,SAAAC,GACd,OAAO0C,KAAKM,MAAMhD,KAEpBsB,KAAKL,SAAS,CACZzB,MAAOqD,yCAGEtB,GACC,UAATA,IACDU,SAASC,eAAe,SAASC,UAAY,0FAoC/C,OADAxC,QAAQC,IAAI0B,KAAKZ,MAAMlB,OAErBS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,aACAH,EAAAC,EAAAC,cAAC8C,EAAD,CAAOxD,WAAY6B,KAAK7B,WAAYD,MAAO8B,KAAKZ,MAAMlB,MAAOE,EAAG4B,KAAK5B,IACrEO,EAAAC,EAAAC,cAAC+C,EAAD,CAASlC,QAASM,KAAKN,UACvBf,EAAAC,EAAAC,cAAA,OAAKG,GAAG,QAAQF,UAAU,oCA3DhBqB,aCOE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASzB,SAASC,eAAe,SD2H3C,kBAAmByB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b0aa06ea.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Todos = ({todos, deleteTask, s}) => {\r\n    console.log(todos);\r\n    const todoList = todos.length ? (\r\n        todos.map(todo => {\r\n            return (\r\n                <div className=\"collection-item\" key={todo.id}>\r\n                    <span>{todo.content}</span><pre></pre>\r\n                    <button className=\"waves-effect waves-light btn-small\" onClick={() => {deleteTask(todo.id)}}>Delete</button>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <p className=\"center\">You have no tasks left! :)</p>\r\n    )\r\n\r\n    return (\r\n        <div className=\"todos collection\">\r\n            {todoList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todos","import React, { Component } from 'react'\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        content: ''\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTask(this.state);\r\n        this.setState({\r\n            content: ''\r\n        })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>Add Task</label>\r\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.content}></input><button className=\"waves-effect waves-light btn-small\">Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo","import React, {Component} from 'react';\r\nimport Todos from './todos'\r\nimport AddTodo from './AddTask'\r\nimport Cookies from 'js-cookie'\r\n\r\nclass App extends Component{\r\n  state = {\r\n    todos: [\r\n      \r\n    ]\r\n  }\r\n  s = true;\r\n  componentDidMount(){\r\n    const c = Object.values(Cookies.get());\r\n    var obj = c.map(todo => {\r\n      return(JSON.parse(todo))\r\n    });\r\n    this.setState({\r\n      todos: obj\r\n    })\r\n  }\r\n  displayAlert(type){\r\n    if(type === \"error\"){\r\n      document.getElementById('alert').innerHTML = \"You have not completed this task on your list yet! :(\";\r\n    }\r\n  }\r\n  deleteTask = (id) => {\r\n    const todos = this.state.todos.filter(todo => {\r\n      return todo.id !== id;\r\n    })\r\n    Cookies.remove(id);\r\n    this.setState({\r\n      todos: todos\r\n    })\r\n  }\r\n  addTask = (todo) => {\r\n    // check if duplicate\r\n    var present = false;\r\n    for(var i in this.state.todos){\r\n      if(this.state.todos[i].content === todo.content){\r\n        present = true;\r\n      }\r\n    }\r\n\r\n    if(!present){\r\n      document.getElementById('alert').innerHTML = \"\";\r\n      todo.id = Math.random();\r\n      const todos = [...this.state.todos, todo];\r\n      this.setState({\r\n        todos: todos\r\n      })\r\n      Cookies.set(todo.id, JSON.stringify(todo), { expires: 30 });\r\n      this.s = false;\r\n    }else{\r\n      this.displayAlert(\"error\");\r\n    }\r\n  }\r\n  render(){\r\n    console.log(this.state.todos)\r\n    return (\r\n      <div className=\"App container\">\r\n        <h1 className=\"center teal-text\">Todo List</h1>\r\n        <Todos deleteTask={this.deleteTask} todos={this.state.todos} s={this.s}/>\r\n        <AddTodo addTask={this.addTask}/>\r\n        <div id=\"alert\" className=\"red-text text-lighten-1\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}